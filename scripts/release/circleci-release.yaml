version: 2.0
jobs:
  build:
    machine:
      image: default
    environment:
      # disable implicit git paging.  CircleCI runs commands with in a tty
      # making git assume it's an interactive session.
      PAGER: cat
      GIT_PAGER: cat
    steps:
    - run:
        name: setup
        command: |
          if [[ -z "${NOMAD_OSS_REVISION}" ]]
          then
            echo 'NOMAD_OSS_REVISION is not set'
            exit 1
          fi

          if [[ -z "${NOMAD_VERSION}" ]]
          then
            echo 'NOMAD_VERSION is not set'
            exit 1
          fi

          if [[ -z "${NOMAD_ENTERPRISE_REVISION}" ]]
          then
            echo 'NOMAD_ENTERPRISE_REVISION is not set'
            exit 1
          fi

          mkdir -p ~/.ssh
          cat <<'EOF' >> ~/.ssh/config
          Host sharedmac-bot
            Hostname 207.254.52.171
            User hashicorp-bot
          EOF

          git config --global user.email "nomad@hashicorp.com"
          git config --global user.name "Nomad Release Bot"

    - run:
        name: inspect information
        command: |
          echo "RELEASE VERSION     : ${NOMAD_VERSION}"
          echo "OSS BRANCH          : ${NOMAD_OSS_BRANCH}"
          echo "ENTERPRISE BRANCH   : ${NOMAD_ENTERPRISE_BRANCH}"
          echo "OSS REVISION        : ${NOMAD_OSS_REVISION}"
          echo "ENTERPRISE REVISION : ${NOMAD_ENTERPRISE_REVISION}"

    ############## OSS Code
    - run:
        name: "oss: checkout code"
        command: |

          git clone git@github.com:hashicorp/nomad.git ~/nomad-oss
          cd ~/nomad-oss

          if [[ "${NOMAD_OSS_FROM_ENTERPRISE}" == "true" ]]
          then
            git remote add nomad-ent git@github.com:hashicorp/nomad-enterprise.git
            git fetch nomad-ent
          fi

          git checkout "${NOMAD_OSS_BRANCH}" || git checkout -b "${NOMAD_OSS_BRANCH}"
          git reset --hard "${NOMAD_OSS_REVISION}"

    - run:
        name: build docker builder image
        path: ~/nomad-oss
        command: |
          docker build \
            -f ./scripts/release/Dockerfile \
            -t nomad-builder:latest \
            .

    - run:
        name: "oss: build Linux"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
          PRERELEASE_TARGET: prerelease
          RELEASE_TARGET: release
        path: ~/nomad-oss
        command: &build_linux |
          mkdir -p "${ARTIFACTS_PATH}"
          chmod 777 "${ARTIFACTS_PATH}"

          docker run --rm \
            -v $(pwd)/.git:/tmp/nomad-git:ro \
            -v ${ARTIFACTS_PATH}:/tmp/artifacts:rw \
            -e "PRERELEASE_TARGET=${PRERELEASE_TARGET}" \
            -e "RELEASE_TARGET=${RELEASE_TARGET}" \
            -e "NOMAD_VERSION=${NOMAD_VERSION}" \
            nomad-builder:latest \
            /tmp/scripts/docker-build-all

          sudo chown -R $(whoami):$(whoami) "${ARTIFACTS_PATH}"

    - run:
        name: "oss: inspect changes"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
        command: &inspect_changes |
          set -x
          cd ${ARTIFACTS_PATH}/repo
          git status
          git log -2
          git show --name-only
          ./pkg/linux_amd64/nomad --version

    - run:
        name: "oss: build macOS"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
          RELEASE_TARGET: release
        command: &build_mac |
          "${ARTIFACTS_PATH}/repo/scripts/release/mac-remote-build" \
            "${ARTIFACTS_PATH}/repo" "${RELEASE_TARGET}"

    - run:
        name: "oss: compress release"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
        command: &compress_repo |
          project="$(basename ${ARTIFACTS_PATH})"
          artifacts_dir="$(dirname ${ARTIFACTS_PATH})"

          tar -cz \
            --exclude '*/.git/hooks' \
            --exclude '*/ui/tmp' \
            --exclude '*/ui/dist' \
            --exclude '*/ui/node_modules' \
            --exclude '*/pkg/*/nomad' \
            --exclude '*/pkg/*/nomad.exe' \
            -f "${artifacts_dir}/${project}.tar.gz" \
            -C "${artifacts_dir}" \
            "${project}"

    - run:
        name: "oss: inspect checksum"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
        command: &inspect_checksum |
          cd ${ARTIFACTS_PATH}/repo
          find pkg -type f | sort | xargs sha256sum
          sha256sum ${ARTIFACTS_PATH}.tar.gz

    - run:
        name: "oss: upload repo to S3"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-OSS-artifacts
          ARTIFACT_NAME: nomad-OSS-artifacts
        command: &upload_s3_repo |
          destination="s3://nomad-team-test-binary/release-prep/${NOMAD_VERSION}/circleci-${CIRCLE_BUILD_NUM}/${ARTIFACT_NAME}"

          echo "Uploading artifacts to ${destination}"

          echo "Uploading repo tarball to artifacts to ${destination}/repo.tar.gz"
          aws --region us-east-1 s3 cp \
            "${ARTIFACTS_PATH}.tar.gz" \
            "${destination}/repo.tar.gz"

          echo "Uploading zipped binaries"
          aws --region us-east-1 s3 sync \
            --exclude="*/nomad" \
            --exclude="*/nomad.exe" \
            "${ARTIFACTS_PATH}/repo/pkg/" \
            "${destination}/pkg/"

    - store_artifacts:
        name: "oss: marking repo as artifact"
        path: /tmp/artifacts/nomad-OSS-artifacts.tar.gz
        
    - store_artifacts:
        name: "oss: marking binaries as artifact"
        path: /tmp/artifacts/nomad-OSS-artifacts/repo/pkg

    ############## Enterprise Code
    - run:
        name: "ent: checkout code"
        command: |
          git clone git@github.com:hashicorp/nomad-enterprise.git ~/nomad-ent
          cd ~/nomad-ent
          git checkout "${NOMAD_ENTERPRISE_BRANCH}" || git checkout -b "${NOMAD_ENTERPRISE_BRANCH}"
          git reset --hard "${NOMAD_ENTERPRISE_REVISION}"

          # merge OSS
          OSS_HEAD=$(git -C /tmp/artifacts/nomad-OSS-artifacts/repo rev-parse HEAD)
          git remote add oss /tmp/artifacts/nomad-OSS-artifacts/repo
          git fetch oss
          if ! git merge ${OSS_HEAD}
          then
            git status
            git checkout --theirs CHANGELOG.md
            git checkout --theirs version/version.go
            git checkout --theirs command/agent/bindata_assetfs.go
            git add CHANGELOG.md version/version.go command/agent/bindata_assetfs.go
            git commit -m "merge latest OSS master ${OSS_HEAD}"
          fi

    - run:
        name: "ent: build Linux"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
          PRERELEASE_TARGET: prerelease
          RELEASE_TARGET: release
        path: ~/nomad-ent
        command: *build_linux 

    - run:
        name: "ent: inspect changes"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
        command: *inspect_changes

    - run:
        name: "ent: build macOS"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
          RELEASE_TARGET: release
        command: *build_mac

    - run:
        name: "ent: compress release"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
        command: *compress_repo

    - run:
        name: "ent: inspect checksum"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
        command: *inspect_checksum

    - run:
        name: "ent: upload repo to S3"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-ENT-artifacts
          ARTIFACT_NAME: nomad-ENT-artifacts
        command: *upload_s3_repo

    - store_artifacts:
        name: "ent: marking repo as artifact"
        path: /tmp/artifacts/nomad-ENT-artifacts.tar.gz
        
    - store_artifacts:
        name: "ent: marking binaries as artifact"
        path: /tmp/artifacts/nomad-ENT-artifacts/repo/pkg

    ############## Pro Code
    - run:
        name: "pro: checkout code"
        command: |
          git clone /tmp/artifacts/nomad-ENT-artifacts/repo/.git ~/nomad-pro
          cd ~/nomad-pro
          git checkout "${NOMAD_ENTERPRISE_BRANCH}"
          git remote set-url origin git@github.com:hashicorp/nomad-enterprise.git

    - run:
        name: "pro: build Linux"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
          PRERELEASE_TARGET: help # prerelease is a NOOP
          RELEASE_TARGET: prorelease
        path: ~/nomad-pro
        command: *build_linux 

    - run:
        name: "pro: inspect changes"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
        command: *inspect_changes

    - run:
        name: "pro: build macOS"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
          RELEASE_TARGET: prorelease
        command: *build_mac

    - run:
        name: "pro: compress release"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
        command: *compress_repo

    - run:
        name: "pro: inspect checksum"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
        command: *inspect_checksum

    - run:
        name: "pro: upload repo to S3"
        environment:
          ARTIFACTS_PATH: /tmp/artifacts/nomad-PRO-artifacts
          ARTIFACT_NAME: nomad-PRO-artifacts
        command: *upload_s3_repo

    - store_artifacts:
        name: "pro: marking repo as artifact"
        path: /tmp/artifacts/nomad-PRO-artifacts.tar.gz
        
    - store_artifacts:
        name: "pro: marking binaries as artifact"
        path: /tmp/artifacts/nomad-PRO-artifacts/repo/pkg

    - run:
        name: "list all binary versions"
        command: |
          cd /tmp/artifacts
          for nomad in */repo/pkg/$(go env GOOS)_$(go env GOARCH)/nomad; do echo "${nomad}:  $(${nomad} --version)"; done | sort -k2

    - run:
        name: "upload uber tarball to S3"
        command: |
          destination="s3://nomad-team-test-binary/release-prep/${NOMAD_VERSION}/circleci-${CIRCLE_BUILD_NUM}/uber-repo.tar.gz"

          echo "Uploading artifacts to ${destination}"

          tar -cz \
            --exclude '*/.git/hooks' \
            --exclude '*/ui/tmp' \
            --exclude '*/ui/dist' \
            --exclude '*/ui/node_modules' \
            --exclude '*/nomad-*-artifacts.tar.gz' \
            --exclude '*/pkg/*/nomad' \
            --exclude '*/pkg/*/nomad.exe' \
            -f /tmp/uber-repository.tar.gz \
            -C /tmp/artifacts \
            .

          echo "Uploading repo tarball to artifacts to ${destination}"
          aws --region us-east-1 s3 cp \
            "/tmp/uber-repository.tar.gz" \
            "${destination}"
