### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
# Orb 'circleci/slack@3.2.0' resolved to 'circleci/slack@3.2.0'
version: 2
jobs:
  test-nomad:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./nomad/...
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-api:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./api/...
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-exec:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./drivers/exec
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-client:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./client/...
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-shared-exec:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./drivers/shared/executor
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-ui:
    docker:
    - environment:
        JOBS: 2
      image: circleci/node:10-browsers
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-deps-{{ checksum "ui/yarn.lock" }}
        - v1-deps-
    - run:
        command: cd ui && yarn install
        name: yarn install
    - save_cache:
        key: v1-deps-{{ checksum "ui/yarn.lock" }}
        paths:
        - ./ui/node_modules
    - run:
        command: cd ui && yarn run lint:js
        name: lint:js
    - run:
        command: cd ui && yarn run lint:hbs
        name: lint:hbs
    - run:
        command: cd ui && yarn test
        name: Ember tests
  lint-go:
    docker:
    - image: golang:1.14
    working_directory: /go/src/github.com/hashicorp/nomad
    steps:
    - checkout
    - run:
        command: apt-get update; apt-get install -y shellcheck sudo unzip
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: "CCI_VERSION=\"0.1.5879\"\nCCI_SHA256=\"f178ea62c781aec06267017404f87983c87f171fd0e66ef3737916246ae66dd6\"\n\nURL=\"https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CCI_VERSION}/circleci-cli_${CCI_VERSION}_linux_amd64.tar.gz\"\n\nmkdir -p /tmp/circleci-cli/\ncurl --fail --show-error --location \\\n  -o /tmp/circleci-cli/cli.tar.gz \"${URL}\"\n\necho \"$CCI_SHA256 /tmp/circleci-cli/cli.tar.gz\" | sha256sum -c\n\ntar -xz --strip-components=1 \\\n  -C /tmp/circleci-cli \\\n  -f /tmp/circleci-cli/cli.tar.gz \\\n  \"circleci-cli_${CCI_VERSION}_linux_amd64/circleci\" \n\nsudo cp /tmp/circleci-cli/circleci /usr/bin/circleci-local-cli\n\ncircleci-local-cli version\n"
        name: Install CircleCI CLI 0.1.5879
    - run:
        command: make deps lint-deps
    - run:
        command: make check
    - run:
        command: make checkscripts
    - run:
        command: make -C .circleci CIRCLECI="circleci-local-cli --skip-update-check" ci-verify
        name: check .circleci/config.yml is up-to-date
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
  website-docker-image:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - setup_remote_docker
    - run:
        command: |
          # There is an edge case that would cause an issue here - if dependencies are updated to an exact copy
          # of a previous version, for example if packge-lock.json is reverted, we need to manually push the new
          # image to the "latest" tag
          # Ignore job if running an enterprise build
          IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
          echo "Using $IMAGE_TAG"
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/nomad" ]; then
            echo "Not Nomad OSS Repo, not building website docker image"
          elif curl https://hub.docker.com/v2/repositories/hashicorp/nomad-website/tags/$IMAGE_TAG -fsL > /dev/null; then
              echo "Dependencies have not changed, not building a new website docker image."
          else
              cd website/
              docker build -t hashicorp/nomad-website:$IMAGE_TAG .
              docker tag hashicorp/nomad-website:$IMAGE_TAG hashicorp/nomad-website:latest
              docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
              docker push hashicorp/nomad-website
          fi
        name: Build Docker Image if Necessary
  merge-oss:
    docker:
    - image: golang:1.12.16
    working_directory: /go/src/github.com/hashicorp/nomad
    steps:
    - run:
        command: |
          # FAIL_REASON is used in the slack message below.
          # We don't add a custom reason for every case, just the common ones.
          echo "export FAIL_REASON='for an unknown reason, @mahmood please investigate: $CIRCLE_BUILD_URL'" >> $BASH_ENV
        name: prepare initial failing reason
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: apt-get update; apt-get install -y sudo
    - run:
        command: "CCI_VERSION=\"0.1.5879\"\nCCI_SHA256=\"f178ea62c781aec06267017404f87983c87f171fd0e66ef3737916246ae66dd6\"\n\nURL=\"https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CCI_VERSION}/circleci-cli_${CCI_VERSION}_linux_amd64.tar.gz\"\n\nmkdir -p /tmp/circleci-cli/\ncurl --fail --show-error --location \\\n  -o /tmp/circleci-cli/cli.tar.gz \"${URL}\"\n\necho \"$CCI_SHA256 /tmp/circleci-cli/cli.tar.gz\" | sha256sum -c\n\ntar -xz --strip-components=1 \\\n  -C /tmp/circleci-cli \\\n  -f /tmp/circleci-cli/cli.tar.gz \\\n  \"circleci-cli_${CCI_VERSION}_linux_amd64/circleci\" \n\nsudo cp /tmp/circleci-cli/circleci /usr/bin/circleci-local-cli\n\ncircleci-local-cli version\n"
        name: Install CircleCI CLI 0.1.5879
    - run:
        command: |
          set -eux -o pipefail
          #
          # Configure Git
          git config --global user.email "hashicorp-ci@users.noreply.github.com"
          git config --global user.name "hashicorp-ci"

          # Merge OSS master branch to Enterprise merge branch
          git remote add oss https://github.com/hashicorp/nomad.git
          git fetch oss
          git_merge_branch="ci/oss-merge-$(date +%Y%m%d%H%M%S)"

          git checkout -b "${git_merge_branch}"
          latest_oss_commit="$(git rev-parse oss/master)"
          message="Merge Nomad OSS branch 'master' at commit ${latest_oss_commit}"
          if ! git merge -m "$message" oss/master; then
            # try to merge common conflicting files
            git status
            git checkout --theirs CHANGELOG.md
            git checkout --theirs version/version.go
            git checkout --theirs command/agent/bindata_assetfs.go
            # Regenerate enterprise Circle CI config to apply changes from OSS merge.
            make -C .circleci CIRCLECI="circleci-local-cli --skip-update-check" config.yml

            git add CHANGELOG.md version/version.go command/agent/bindata_assetfs.go .circleci/config.yml

            # attempt merging again
            if ! git commit -m "$message"; then
              echo "export FAIL_REASON='because git was unable to auto-merge'" >> $BASH_ENV
              exit 1
            fi
          fi

          # sanity check - do basic compile build
          if ! make GOTAGS="ent codegen_generated" pkg/linux_amd64/nomad ; then
            echo "export FAIL_REASON='because nomad failed to compile after auto-merge'" >> $BASH_ENV
            exit 1
          fi

          # now merge and push
          git checkout master
          git merge "${git_merge_branch}"
          git push origin master
        name: Merge Merge OSS master branch
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="fail"' >> $BASH_ENV
        name: Slack - Setting Failure Condition
        when: on_fail
    - run:
        command: |
          echo 'export SLACK_BUILD_STATUS="success"' >> $BASH_ENV
        name: Slack - Setting Success Condition
        when: on_success
    - run:
        command: |
          if [ -z "$BASH" ]; then
            echo Bash not installed.
            exit 1
          fi
        name: Provide error if non-bash shell
    - run:
        command: |
          current_branch_in_filter=false

          IFS="," read -ra BRANCH_FILTERS <<< ""

          for i in "${BRANCH_FILTERS[@]}"; do
            if [ "${i}" == "${CIRCLE_BRANCH}" ]; then
              current_branch_in_filter=true
            fi
          done

          if [ "x" == "x" ] || [ "$current_branch_in_filter" = true ]; then
            # Provide error if no webhook is set and error. Otherwise continue
            if [ -z "$SLACK_WEBHOOK_OSS_ENT_AUTOMERGE" ]; then
              echo "NO SLACK WEBHOOK SET"
              echo "Please input your SLACK_WEBHOOK value either in the settings for this project, or as a parameter for this orb."
              exit 1
            else
              #Create Members string
              if [ -n "" ]; then
                IFS="," read -ra SLACK_MEMBERS <<< ""
                for i in "${SLACK_MEMBERS[@]}"; do
                  if [ $(echo ${i} | head -c 1) == "S" ]; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
                  elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                    SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
                  else
                    SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
                  fi
                done
              fi
              #If successful
              if [ "$SLACK_BUILD_STATUS" = "success" ]; then
                #Skip if fail_only
                if [ true = true ]; then
                  echo "The job completed successfully"
                  echo '"fail_only" is set to "true". No Slack notification sent.'
                else
                  curl -X POST -H 'Content-type: application/json' \
                    --data "{ \
                              \"attachments\": [ \
                                { \
                                  \"fallback\": \":tada: The Nomad OSS -> ENT merge just happened automatically.
          \", \
                                  \"text\": \":tada: The Nomad OSS -> ENT merge just happened automatically.
          \", \
                                  \"fields\": [ \
                                    { \
                                      \"title\": \"Project\", \
                                      \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                                      \"short\": true \
                                    }, \
                                    { \
                                      \"title\": \"Job Number\", \
                                      \"value\": \"$CIRCLE_BUILD_NUM\", \
                                      \"short\": true \
                                    } \
                                  ], \
                                  \"actions\": [ \
                                    { \
                                      \"type\": \"button\", \
                                      \"text\": \"Visit Job\", \
                                      \"url\": \"$CIRCLE_BUILD_URL\" \
                                    } \
                                  ], \
                                  \"color\": \"#1CBF43\" \
                                } \
                              ] \
                            } " $SLACK_WEBHOOK_OSS_ENT_AUTOMERGE
                  echo "Job completed successfully. Alert sent."
                fi
              else
                #If Failed
                curl -X POST -H 'Content-type: application/json' \
                  --data "{ \
                    \"attachments\": [ \
                      { \
                        \"fallback\": \":red_circle: The Nomad OSS -> ENT merge failed today $FAIL_REASON.
          \", \
                        \"text\": \":red_circle: The Nomad OSS -> ENT merge failed today $FAIL_REASON.
          \", \
                        \"fields\": [ \
                          { \
                            \"title\": \"Project\", \
                            \"value\": \"$CIRCLE_PROJECT_REPONAME\", \
                            \"short\": true \
                          }, \
                          { \
                            \"title\": \"Job Number\", \
                            \"value\": \"$CIRCLE_BUILD_NUM\", \
                            \"short\": true \
                          } \
                        ], \
                        \"actions\": [ \
                          { \
                            \"type\": \"button\", \
                            \"text\": \"Visit Job\", \
                            \"url\": \"$CIRCLE_BUILD_URL\" \
                          } \
                        ], \
                        \"color\": \"#ed5c5c\" \
                      } \
                    ] \
                  } " $SLACK_WEBHOOK_OSS_ENT_AUTOMERGE
                echo "Job failed. Alert sent."
              fi
            fi
          else
            echo "Current branch is not included in only_for_branches filter; no status alert will be sent"
          fi
        name: Slack - Sending Status Alert
        shell: /bin/bash
        when: always
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
  test-other:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ''
    - GOTEST_PKGS_EXCLUDE: ./api|./client|./drivers/docker|./drivers/exec|./drivers/rkt|./drivers/shared/executor|./nomad|./devices
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-devices:
    docker:
    - image: golang:1.14
    working_directory: /go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./devices/...
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: apt-get update; apt-get install -y shellcheck sudo unzip
    - run:
        command: make deps
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-docker:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./drivers/docker
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: amd64
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  build-binaries:
    docker:
    - image: golang:1.14
    working_directory: /go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GO_TAGS: codegen_generated
    steps:
    - checkout
    - run:
        command: apt-get update; apt-get install -y sudo unzip zip
    - run:
        command: make deps
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
    - run:
        command: make pkg/windows_amd64.zip pkg/linux_amd64.zip
    - store_artifacts:
        destination: /builds/nomad_windows_amd64.zip
        path: pkg/windows_amd64.zip
    - store_artifacts:
        destination: /builds/nomad_linux_amd64.zip
        path: pkg/linux_amd64.zip
  test-e2e:
    docker:
    - image: golang:1.14
    working_directory: /go/src/github.com/hashicorp/nomad
    steps:
    - checkout
    - run:
        command: apt-get update; apt-get install -y sudo unzip
    - run:
        command: |
          groupadd --gid 3434 circleci
          useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci
          echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci
          echo 'Defaults    env_keep += "DEBIAN_FRONTEND"' >> /etc/sudoers.d/env_keep
          chown -R circleci:circleci /go
        name: prepare non-root user
    - run:
        command: sudo -E -H -u circleci PATH=${PATH} make deps
    - run:
        command: sudo -E -H -u circleci PATH=${PATH} make e2e-test
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
  test-32bit:
    machine:
      image: default
    working_directory: ~/go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOLANG_VERSION: 1.14
    - GOMAXPROCS: 1
    - GOPATH: /home/circleci/go
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GOTEST_PKGS: ./client/fingerprint
    - GOTEST_PKGS_EXCLUDE: ''
    - GOTESTARCH: '386'
    steps:
    - checkout
    - run:
        command: |
          set -x
          echo installing golang ${GOLANG_VERSION}
          sudo rm -rf /usr/local/go
          wget -O /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf /tmp/golang.tar.gz
          rm -rf /tmp/golang.tar.gz
        name: install golang
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: |
          wget -q -O /tmp/consul.zip https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul 1.6.1
    - run:
        command: |
          wget -q -O /tmp/vault.zip https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/vault.zip
          rm -rf /tmp/vault*
        name: Install Vault 1.2.3
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run:
        command: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
        name: Running Nomad Tests
        no_output_timeout: 20m
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
workflows:
  build-test:
    jobs:
    - build-binaries:
        filters:
          branches:
            ignore:
            - stable-website
    - lint-go:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-client:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-nomad:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-api:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-devices:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-other:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-docker:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-exec:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-shared-exec:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-32bit:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-e2e:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-ui:
        filters:
          branches:
            ignore:
            - stable-website
            - /^docs-.*/
  merge-oss:
    jobs:
    - merge-oss:
        filters:
          branches:
            only: master
    triggers:
    - schedule:
        cron: 0 12 * * 1-5
        filters:
          branches:
            only: master
  website:
    jobs:
    - website-docker-image:
        filters:
          branches:
            only:
            - master
        context: static-sites
  version: 2
