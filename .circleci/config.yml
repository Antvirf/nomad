### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or add files in subdirectories next to this file, then run 'make ci-config'.
### ***
commands:
  install-buf:
    steps:
    - run:
        command: |
          sudo ./scripts/vagrant-linux-priv-buf.sh
        name: install buf
  install-circleci-local-cli:
    parameters:
      sha256:
        default: f178ea62c781aec06267017404f87983c87f171fd0e66ef3737916246ae66dd6
        type: string
      version:
        default: 0.1.5879
        type: string
    steps:
    - run:
        command: |
          CCI_VERSION="<< parameters.version >>"
          CCI_SHA256="<< parameters.sha256 >>"

          URL="https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CCI_VERSION}/circleci-cli_${CCI_VERSION}_linux_amd64.tar.gz"

          mkdir -p /tmp/circleci-cli/
          curl --fail --show-error --location \
            -o /tmp/circleci-cli/cli.tar.gz "${URL}"

          echo "$CCI_SHA256 /tmp/circleci-cli/cli.tar.gz" | sha256sum -c

          tar -xz --strip-components=1 \
            -C /tmp/circleci-cli \
            -f /tmp/circleci-cli/cli.tar.gz \
            "circleci-cli_${CCI_VERSION}_linux_amd64/circleci"

          sudo cp /tmp/circleci-cli/circleci /usr/bin/circleci-local-cli

          circleci-local-cli version
        name: Install CircleCI CLI << parameters.version >>
  install-consul:
    parameters:
      version:
        default: 1.8.3
        type: string
    steps:
    - run:
        command: |
          curl -SL --fail -o /tmp/consul.zip https://releases.hashicorp.com/consul/<< parameters.version >>/consul_<< parameters.version >>_linux_amd64.zip
          sudo unzip -d /usr/local/bin /tmp/consul.zip
          rm -rf /tmp/consul*
        name: Install Consul << parameters.version >>
  install-golang:
    parameters:
      target_directory:
        default: /usr/local
        type: string
    steps:
    - run:
        command: |
          set -x

          echo installing golang ${GOLANG_VERSION}

          case "${OSTYPE}" in
            linux*)  os="linux" ;;
            darwin*) os="darwin" ;;
            msys*)   os="windows" ;;
            *)       echo "unknown os: ${OSTYPE}"; exit 1 ;;
          esac

          if [[ "${os}" != "windows" ]]
          then
            sudo rm -rf << parameters.target_directory >>/go
            sudo mkdir -p << parameters.target_directory >>
            curl -SL --fail -o /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.${os}-amd64.tar.gz
            sudo tar -C << parameters.target_directory >> -xzf /tmp/golang.tar.gz
            rm -rf /tmp/golang.tar.gz
          else
            rm -rf << parameters.target_directory >>/go
            mkdir -p <<parameters.target_directory >>
            curl -SL --fail -o /tmp/go.zip https://dl.google.com/go/go${GOLANG_VERSION}.windows-amd64.zip
            unzip -q -o /tmp/go.zip -d << parameters.target_directory >>
            rm -rf /tmp/go.zip
          fi
        name: Install golang
  install-vault:
    parameters:
      version:
        default: 1.2.4
        type: string
    steps:
    - run:
        command: |
          set -x

          case "${OSTYPE}" in
            linux*)  os="linux" ;;
            darwin*) os="darwin" ;;
            msys*)   os="windows" ;;
            *)       echo "unknown os: ${OSTYPE}"; exit 1 ;;
          esac

          curl -SL --fail -o /tmp/vault.zip https://releases.hashicorp.com/vault/"<< parameters.version >>"/vault_"<< parameters.version >>"_"${os}"_amd64.zip

          if [[ "${os}" != "windows" ]]; then
            sudo unzip -d /usr/local/bin /tmp/vault.zip
            rm -rf /tmp/vault*
          else
            rm -rf c:\Windows\vault.exe
            unzip /tmp/vault.zip -d "/c/Windows"
            rm -rf /tmp/vault*
          fi
        name: Install Vault
  run-tests:
    steps:
    - run:
        command: |
          if [ -z $GOTEST_PKGS_EXCLUDE ];
          then
            unset GOTEST_PKGS_EXCLUDE
          else
            unset GOTEST_PKGS
          fi

          if [ ! -z $GOTESTARCH ]; then
            export GOARCH="$GOTESTARCH";
          fi

          mkdir -p /tmp/test-reports
          sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs

          if [ ! -z $GOTEST_MOD ]; then
            sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad-module
          else
            sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make test-nomad
          fi
        name: Running Nomad Tests
        no_output_timeout: 20m
executors:
  go:
    docker:
    - image: docker.mirror.hashicorp.services/golang:1.15.6
    environment:
      GIT_PAGER: cat
      GOMAXPROCS: 1
      GOPATH: /go
      GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
      GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
      NOMAD_SLOW_TEST: 1
      PAGER: cat
    working_directory: /go/src/github.com/hashicorp/nomad
  go-machine:
    environment:
      GIT_PAGER: cat
      GOLANG_VERSION: 1.15.6
      GOMAXPROCS: 1
      GOPATH: /home/circleci/go
      GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
      GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
      NOMAD_SLOW_TEST: 1
      PAGER: cat
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/go/src/github.com/hashicorp/nomad
  go-machine-recent:
    environment:
      GIT_PAGER: cat
      GOLANG_VERSION: 1.15.6
      GOMAXPROCS: 1
      GOPATH: /home/circleci/go
      GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
      GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
      NOMAD_SLOW_TEST: 1
      PAGER: cat
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/go/src/github.com/hashicorp/nomad
  go-macos:
    environment:
      GIT_PAGER: cat
      GOLANG_VERSION: 1.15.6
      GOMAXPROCS: 1
      GOPATH: /Users/distiller/go
      GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
      GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
      NOMAD_SLOW_TEST: 1
      PAGER: cat
    macos:
      xcode: 11.3.1
    working_directory: ~/go/src/github.com/hashicorp/nomad
  go-windows:
    environment:
      GOBIN: c:\gopath\bin
      GOLANG_VERSION: 1.15.6
      GOPATH: c:\gopath
      GOTESTSUM_PATH: c:\tmp\test-reports
      GOTESTSUM_VERSION: 0.4.2
      VAULT_VERSION: 1.4.1
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium
      shell: bash --login -eo pipefail
    working_directory: c:\gopath\src\github.com\hashicorp\nomad
jobs:
  algolia_index:
    docker:
    - image: docker.mirror.hashicorp.services/node:12
    steps:
    - checkout
    - run:
        command: |
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/nomad.git" ]; then
            echo "Not Nomad OSS Repo, not indexing Algolia"
            exit 0
          fi

          cd website/
          npm install
          node scripts/index_search_content.js
        name: Push content to Algolia Index
  build-binaries:
    executor: go
    steps:
    - checkout
    - run: apt-get update; apt-get install -y sudo unzip zip
    - run: make deps
    - install-buf
    - run: sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make generate-structs
    - run:
        command: git log -n 1 --pretty=format:%H ui > /tmp/ui-sha
        name: prepare ui cache
    - restore_cache:
        keys:
        - v1-binary-ui-assets-linux-{{ checksum "/tmp/ui-sha" }}
        name: restore compiled ui assets
    - run:
        command: |
          if [[ -f /tmp/ui-assets/bindata_assetfs.go ]]; then
            cp /tmp/ui-assets/bindata_assetfs.go ./command/agent/bindata_assetfs.go
            exit 0
          fi

          ./scripts/vagrant-linux-unpriv-ui.sh

          export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
          export PATH="$GOPATH/bin:/usr/local/go/bin:$PATH"
          . ~/.nvm/nvm.sh
          cd ui && yarn install --frozen-lockfile && cd ..
          JOBS=2 make ember-dist static-assets

          mkdir -p /tmp/ui-assets
          cp ./command/agent/bindata_assetfs.go /tmp/ui-assets/bindata_assetfs.go
        name: prepare ui
    - save_cache:
        key: v1-binary-ui-assets-linux-{{ checksum "/tmp/ui-sha" }}
        name: save compiled ui assets
        paths:
        - /tmp/ui-assets
    - run:
        command: |
          export GO_TAGS="ui $(grep -e '^GO_TAGS ?=' ./GNUmakefile | cut -d= -f2)"
          make pkg/windows_amd64.zip pkg/linux_amd64.zip
        name: build binaries
    - store_artifacts:
        destination: /builds
        path: pkg
    - store_artifacts:
        destination: /ui-assets
        path: /tmp/ui-assets
  build-darwin-binaries:
    executor: go-macos
    steps:
    - checkout
    - run:
        command: echo 'export PATH="${GOPATH}/bin:${HOME}/goinstall/go/bin:$PATH"'
          >> ${BASH_ENV}
        name: configure PATH
    - install-golang:
        target_directory: ~/goinstall
    - run: source ${BASH_ENV} && make deps
    - run: brew install protobuf
    - run: PATH="$GOPATH/bin:${HOME}/goinstall/go/bin:$PATH" make generate-structs
    - run:
        command: git log -n 1 --pretty=format:%H ui > /tmp/ui-sha
        name: prepare ui cache
    - restore_cache:
        keys:
        - v1-binary-ui-assets-darwin-{{ checksum "/tmp/ui-sha" }}
        name: restore compiled ui assets
    - run:
        command: |
          if [[ -f ~/caches/ui-assets/bindata_assetfs.go ]]; then
            cp ~/caches/ui-assets/bindata_assetfs.go ./command/agent/bindata_assetfs.go
            exit 0
          fi

          ./scripts/vagrant-linux-unpriv-ui.sh

          export PATH="$GOPATH/bin:/usr/local/go/bin:$PATH"
          source ${BASH_ENV}
          . ~/.nvm/nvm.sh
          cd ui && yarn install --frozen-lockfile && cd ..
          JOBS=2 make ember-dist static-assets

          mkdir -p ~/caches/ui-assets
          cp ./command/agent/bindata_assetfs.go ~/caches/ui-assets/bindata_assetfs.go
        name: prepare ui
    - save_cache:
        key: v1-binary-ui-assets-darwin-{{ checksum "/tmp/ui-sha" }}
        name: save compiled ui assets
        paths:
        - ~/caches/ui-assets
    - run:
        command: |
          source ${BASH_ENV}
          export GO_TAGS="ui $(grep -e '^GO_TAGS ?=' ./GNUmakefile | cut -d= -f2)"
          make pkg/darwin_amd64.zip
        name: build binaries
    - store_artifacts:
        destination: /builds/nomad_darwin_amd64.zip
        path: pkg/darwin_amd64.zip
  lint-go:
    executor: go
    steps:
    - checkout
    - run: apt-get update; apt-get install -y shellcheck sudo unzip
    - install-buf
    - install-circleci-local-cli
    - run: make deps lint-deps
    - run: make check
    - run: make checkscripts
    - run: mkdir -p ui/dist && make generate-all static-assets
  merge-oss:
    executor: go
    parameters:
      dest_branch:
        default: master
        type: string
      origin_branch:
        default: master
        type: string
    steps:
    - run:
        command: |
          # FAIL_REASON is used in the slack message below.
          # We don't add a custom reason for every case, just the common ones.
          echo "export FAIL_REASON='for an unknown reason, @mahmood please investigate: $CIRCLE_BUILD_URL'" >> $BASH_ENV
        name: prepare initial failing reason
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run: apt-get update; apt-get install -y sudo
    - install-circleci-local-cli
    - run:
        command: |
          set -eux -o pipefail
          #
          # Configure Git
          git config --global user.email "hashicorp-ci@users.noreply.github.com"
          git config --global user.name "hashicorp-ci"

          # fetch latest destination branch - to support oss->ent propagation through rebuilds
          git pull origin << parameters.dest_branch >>

          # Merge OSS master branch to Enterprise merge branch
          git remote add oss https://github.com/hashicorp/nomad.git
          git fetch oss
          git_merge_branch="ci/oss-merge-<< parameters.origin_branch >>-$(date +%Y%m%d%H%M%S)"

          git checkout -b "${git_merge_branch}"
          latest_oss_commit="$(git rev-parse oss/<< parameters.origin_branch >>)"
          message="Merge Nomad OSS branch '<< parameters.origin_branch >>' at commit ${latest_oss_commit}"
          if ! git merge -m "$message" oss/<< parameters.origin_branch >>; then
            # try to merge common conflicting files
            git status
            git checkout --theirs CHANGELOG.md
            git checkout --theirs version/version.go
            git checkout --theirs command/agent/bindata_assetfs.go
            git checkout --theirs .circleci/config.yml
            git checkout --ours   vendor/modules.txt
            git checkout --ours   go.sum
            make sync

            # Regenerate enterprise CircleCI config to apply changes from OSS merge
            make -C .circleci CIRCLECI="circleci-local-cli --skip-update-check" config.yml

            git add CHANGELOG.md version/version.go command/agent/bindata_assetfs.go go.sum vendor/modules.txt .circleci/config.yml

            # attempt merging again
            if ! git commit -m "$message"; then
              echo "export FAIL_REASON='because git was unable to auto-merge'" >> $BASH_ENV
              exit 1
            fi
          fi

          # quick check - do basic compile build
          if ! make pkg/linux_amd64/nomad ; then
            echo "export FAIL_REASON='because nomad failed to compile after auto-merge'" >> $BASH_ENV
            exit 1
          fi

          # now merge and push
          git checkout << parameters.dest_branch >>
          git merge "${git_merge_branch}"
          git push origin << parameters.dest_branch >>
        name: Merge OSS branch
    - slack/status:
        fail_only: true
        failure_message: |
          :red_circle: The Nomad OSS -> ENT merge failed today $FAIL_REASON.
        success_message: |
          :tada: The Nomad OSS -> ENT merge just happened automatically.
        webhook: $SLACK_WEBHOOK_OSS_ENT_AUTOMERGE
  test-container:
    environment:
      GOTEST_PKGS: << parameters.test_packages >>
      GOTEST_PKGS_EXCLUDE: << parameters.exclude_packages >>
      GOTESTARCH: << parameters.goarch >>
    executor: go
    parameters:
      exclude_packages:
        default: ""
        type: string
      goarch:
        default: amd64
        type: string
      test_packages:
        default: ""
        type: string
    steps:
    - checkout
    - run: apt-get update; apt-get install -y shellcheck sudo unzip
    - run: make deps
    - install-buf
    - install-consul
    - install-vault
    - run-tests
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-e2e:
    executor: go
    steps:
    - checkout
    - run: apt-get update; apt-get install -y sudo unzip
    - run:
        command: |
          groupadd --gid 3434 circleci
          useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci
          echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci
          echo 'Defaults    env_keep += "DEBIAN_FRONTEND"' >> /etc/sudoers.d/env_keep
          chown -R circleci:circleci /go
        name: prepare non-root user
    - run: sudo -E -H -u circleci PATH=${PATH} make deps
    - run: sudo -E -H -u circleci PATH=${PATH} make integration-test
    - run: sudo -E -H -u circleci PATH=${PATH} make e2e-test
  test-machine:
    environment:
      ENABLE_RACE: <<# parameters.enable_race_testing >>TRUE<</ parameters.enable_race_testing
        >>
      GOTEST_MOD: << parameters.test_module >>
      GOTEST_PKGS: << parameters.test_packages >>
      GOTEST_PKGS_EXCLUDE: << parameters.exclude_packages >>
      GOTESTARCH: << parameters.goarch >>
    executor: << parameters.executor >>
    parameters:
      enable_race_testing:
        default: false
        type: boolean
      exclude_packages:
        default: ""
        type: string
      executor:
        default: go-machine-recent
        type: string
      goarch:
        default: amd64
        type: string
      test_module:
        default: ""
        type: string
      test_packages:
        default: ""
        type: string
    steps:
    - checkout
    - install-golang
    - install-buf
    - install-consul
    - install-vault
    - run:
        command: |
          if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == "386" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
          else
            echo "Skipping 32bit lib installation while building for not 386"
          fi
        name: Install 32bit gcc libs
    - run: PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make bootstrap
    - run-tests
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-ui:
    docker:
    - environment:
        JOBS: 2
      image: docker.mirror.hashicorp.services/circleci/node:12-browsers
    steps:
    - checkout
    - restore_cache:
        keys:
        - v3-deps-{{ checksum "ui/yarn.lock" }}
    - run:
        command: cd ui && yarn install --frozen-lockfile
        name: yarn install
    - save_cache:
        key: v3-deps-{{ checksum "ui/yarn.lock" }}
        paths:
        - ./ui/node_modules
    - run:
        command: cd ui && yarn run lint:js
        name: lint:js
    - run:
        command: cd ui && yarn run lint:hbs
        name: lint:hbs
    - run:
        command: mkdir -p /tmp/test-reports && cd ui && yarn test
        name: Ember tests
    - store_test_results:
        path: /tmp/test-reports
    - store_artifacts:
        path: /tmp/test-reports
  test-windows:
    executor: go-windows
    steps:
    - run: git config --global core.autocrlf false
    - checkout
    - run:
        command: |
          mkdir -p $GOBIN
          mkdir -p $GOTESTSUM_PATH
        name: Setup
    - install-golang:
        target_directory: 'c:'
    - run: go version
    - install-vault:
        version: $VAULT_VERSION
    - run: vault version
    - run: choco install make
    - run:
        command: |
          export PATH=$PATH:/c/go/bin:/c/gopath/bin
          make deps
        name: Install golang dependencies
    - run:
        command: docker pull docker.mirror.hashicorp.services/hashicorpnomad/busybox-windows:server2016-0.1
        name: Pre-download docker test image
    - run:
        command: |
          export PATH=$PATH:/c/go/bin:/c/gopath/bin
          go build -o $GOBIN\nomad.exe
        name: Build nomad
    - run:
        command: |
          # Only test docker driver tests for now
          export PATH=$PATH:/c/go/bin:/c/gopath/bin
          gotestsum --format=short-verbose \
            --junitfile $GOTESTSUM_PATH/results.xml \
            github.com/hashicorp/nomad/drivers/docker \
            github.com/hashicorp/nomad/client/lib/fifo \
            github.com/hashicorp/nomad/client/logmon
        name: Run tests with gotestsum
    - store_test_results:
        path: c:\tmp\test-reports
    - store_artifacts:
        path: c:\tmp\test-reports
  website-docker-image:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - run:
        command: |
          # There is an edge case that would cause an issue here - if dependencies are updated to an exact copy
          # of a previous version, for example if packge-lock.json is reverted, we need to manually push the new
          # image to the "latest" tag
          # Ignore job if running an enterprise build
          IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
          echo "Using $IMAGE_TAG"

          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/nomad.git" ]; then
            echo "Not Nomad OSS Repo, not building website docker image"
            circleci-agent step halt
          elif curl https://hub.docker.com/v2/repositories/hashicorp/nomad-website/tags/$IMAGE_TAG -fsL > /dev/null; then
            echo "Dependencies have not changed, not building a new website docker image."
            circleci-agent step halt
          fi
        name: Skip building if nothing changed
    - setup_remote_docker
    - run:
        command: |
          IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
          echo "Using $IMAGE_TAG"

          cd website/
          docker build -t hashicorp/nomad-website:$IMAGE_TAG .
          docker tag hashicorp/nomad-website:$IMAGE_TAG hashicorp/nomad-website:latest
          docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
          docker push hashicorp/nomad-website
        name: Build Docker Image
orbs:
  slack: circleci/slack@3.2.0
references:
  common_envs:
    GIT_PAGER: cat
    GOMAXPROCS: 1
    GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
    GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    NOMAD_SLOW_TEST: 1
    PAGER: cat
  go-machine-image: circleci/classic:201808-01
  go-machine-recent-image: ubuntu-1604:201903-01
  go-windows-image: windows-server-2019-vs2019:stable
version: 2.1
workflows:
  build-test:
    jobs:
    - build-binaries:
        filters:
          branches:
            ignore:
            - stable-website
            - /^.-ui\b.*/
    - lint-go:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - build-darwin-binaries:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-e2e:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - stable-website
    - test-ui:
        filters:
          branches:
            ignore:
            - stable-website
            - /^docs-.*/
            - /^e2e-.*/
    - test-windows:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
    - test-machine:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-client
        test_packages: ./client/...
    - test-machine:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-nomad
        test_packages: ./nomad/...
    - test-machine:
        enable_race_testing: true
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-api
        test_module: api
    - test-container:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-devices
        test_packages: ./devices/...
    - test-machine:
        exclude_packages: ./api|./client|./drivers/docker|./drivers/exec|./drivers/shared/executor|./nomad|./devices|./e2e
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-other
    - test-machine:
        executor: go-machine
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-docker
        test_packages: ./drivers/docker
    - test-machine:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-exec
        test_packages: ./drivers/exec
    - test-machine:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        name: test-shared-exec
        test_packages: ./drivers/shared/executor
    - test-machine:
        filters:
          branches:
            ignore:
            - /^.-ui\b.*/
            - /^docs-.*/
            - /^e2e-.*/
            - stable-website
        goarch: "386"
        name: test-32bit
        test_packages: ./client/fingerprint
  merge-oss:
    jobs:
    - merge-oss:
        filters:
          branches:
            only: master
    triggers:
    - schedule:
        cron: 0 4 * * 1-5
        filters:
          branches:
            only: master
  website:
    jobs:
    - website-docker-image:
        context: static-sites
        filters:
          branches:
            only:
            - master
    - algolia_index:
        context: static-sites
        filters:
          branches:
            only:
            - stable-website
    when:
      equal:
      - https://github.com/hashicorp/nomad
      - << pipeline.project.git_url >>

